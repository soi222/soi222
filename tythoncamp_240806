def left_extend(lst, *elem):
    """lst의 왼쪽에 정해지지 않은 갯수의 elem을 넣고 lst를 반환하는 함수
    """
    elem_list = list(elem)
    for j, i in enumerate(elem_list):
        lst.insert(j,i)


    return lst

#my_max함수

lst_tuple = []
for i in range(1):
    for j in range(5):
        random_tuple = tuple(random.sample(range(100),2))
        lst_tuple.append(random_tuple)

def my_max(lst, cmp = lambda x, y : x + y):
    lst_max_tuple = []
    first_sum = 0

    for i, (first,last) in enumerate(lst):
            if i == 0:
                first_sum = cmp(first,last)
                lst_max_tuple.append(lst[i])

            elif i > 0:
                if cmp(first, last) > first_sum:
                    lst_max_tuple.clear()
                    lst_max_tuple.append(lst[i])
                    first_sum = first + last

    return lst_max_tuple

print(lst_tuple)
my_max(lst_tuple)

#my_min 함수

lst_tuple = []
for i in range(1):
    for j in range(5):
        random_tuple = tuple(random.sample(range(100),2))
        lst_tuple.append(random_tuple)

def my_min(lst, cmp = lambda x, y : x - y):
    lst_min_tuple = []
    first_sum = 0

    for i, (first,last) in enumerate(lst):
            if i == 0:
                first_sum = cmp(first,last)
                lst_min_tuple.append(lst[i])

            elif i > 0:
                if cmp(first, last) < first_sum:
                    lst_min_tuple.clear()
                    lst_min_tuple.append(lst[i])
                    first_sum = cmp(first,last)

    return lst_min_tuple

print(lst_tuple)
my_min(lst_tuple)

# 2. 여러 리스트 관련 함수들 구현해보기
#
# 아래 함수들은 대부분 itertools에 있는 함수들임.
# itertools를 쓰지 말고 구현해 볼 것.
#
# 1) accumulate(lst, function = lambda x, y : x+y)
#
# lst의 각 원소들에 대해서, function을 누적하여 적용한 리스트를 반환.
# lst -> [lst[0], f(lst[0], lst[1]), f(lst[2], f(lst[1], lst[0])), ...]

def accumulate(lst, function = lambda x, y: x+y):
    lst_sum = []
    lst_sum.append(lst[0])

    for i in range(1,len(lst)):
      n = function(lst[i],lst_sum[i-1])
      lst_sum.insert(i,n)
            
    return lst_sum

lst1 = [1,3,5,5,4]

accumulate(lst1) #[1, 4, 9, 14, 18]


# 2) batched(lst, n)
#
# lst의 원소들을 n개의 인접한 원소들끼리 묶은 리스트를 반환.
# ex) batched([1,2,3,4,5], 2)
#     >> [(1,2), (3,4), (5,)]
# ex) batched(['a', 'b', 1, 3, 6, 1, 3, 7], 3)
#     >> [('a', 'b', 1), (3, 6, 1), (1, 3, 7)]

def batched(lst,function = lambda x, y: x+y):
  tuple_lst = []
  for i in range(0, len(lst)-1):
    tuple_lst.append((lst[i],lst[i+1]))
  return tuple(tuple_lst)

lst1 = ["a",1,3,5,5,4]
batched(lst1)
