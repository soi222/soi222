def left_extend(lst, *elem):
    """lst의 왼쪽에 정해지지 않은 갯수의 elem을 넣고 lst를 반환하는 함수
    """
    elem_list = list(elem)
    for j, i in enumerate(elem_list):
        lst.insert(j,i)


    return lst

#my_max함수

lst_tuple = []
for i in range(1):
    for j in range(5):
        random_tuple = tuple(random.sample(range(100),2))
        lst_tuple.append(random_tuple)

def my_max(lst, cmp = lambda x, y : x + y):
    lst_max_tuple = []
    first_sum = 0

    for i, (first,last) in enumerate(lst):
            if i == 0:
                first_sum = cmp(first,last)
                lst_max_tuple.append(lst[i])

            elif i > 0:
                if cmp(first, last) > first_sum:
                    lst_max_tuple.clear()
                    lst_max_tuple.append(lst[i])
                    first_sum = first + last

    return lst_max_tuple

print(lst_tuple)
my_max(lst_tuple)

#my_min 함수

lst_tuple = []
for i in range(1):
    for j in range(5):
        random_tuple = tuple(random.sample(range(100),2))
        lst_tuple.append(random_tuple)

def my_min(lst, cmp = lambda x, y : x - y):
    lst_min_tuple = []
    first_sum = 0

    for i, (first,last) in enumerate(lst):
            if i == 0:
                first_sum = cmp(first,last)
                lst_min_tuple.append(lst[i])

            elif i > 0:
                if cmp(first, last) < first_sum:
                    lst_min_tuple.clear()
                    lst_min_tuple.append(lst[i])
                    first_sum = cmp(first,last)

    return lst_min_tuple

print(lst_tuple)
my_min(lst_tuple)

def
